bits := f.cast_to_u64
fract_bits := f64.significand_bits.as_u64 - 1
bias := (u64 2 ** (f64.exponent_bits.as_u64 - 1) - 1)
mask := u64 2 ** f64.exponent_bits.as_u64 - 1
e := ((bits >> fract_bits) & mask).as_i32 - bias.as_i32 + 1
bits2 := bits & (~(mask << fract_bits))
bits3 := bits2 | ((bias - 1) << fract_bits)
if ((bits >> fract_bits) & mask) = 0 then
  (bits3.cast_to_f64, e - 51)
else
  (bits3.cast_to_f64, e)
